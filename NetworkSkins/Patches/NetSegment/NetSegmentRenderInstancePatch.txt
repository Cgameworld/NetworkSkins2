// NetSegment
using ColossalFramework;
using ColossalFramework.UI;
using UnityEngine;

private void RenderInstance(RenderManager.CameraInfo cameraInfo, ushort segmentID, int layerMask, NetInfo info, ref RenderManager.Instance data)
{
	// modified
	NetInfo.Lane[] customLanes = info.m_lanes;
	NetInfo.Segment[] customSegments = info.m_segments;
	if (SegmentSkinManager.SegmentSkins[segmentID] != null) {
		customLanes = SegmentSkinManager.SegmentSkins[segmentID].m_lanes;
		customSegments = SegmentSkinManager.SegmentSkins[segmentID].m:segments;
	}
	// modified end

	NetManager instance = Singleton<NetManager>.instance;
	if (data.m_dirty)
	{
		data.m_dirty = false;
		Vector3 position = instance.m_nodes.m_buffer[m_startNode].m_position;
		Vector3 position2 = instance.m_nodes.m_buffer[m_endNode].m_position;
		data.m_position = (position + position2) * 0.5f;
		data.m_rotation = Quaternion.identity;
		data.m_dataColor0 = info.m_color;
		data.m_dataColor0.a = 0f;
		data.m_dataFloat0 = Singleton<WeatherManager>.instance.GetWindSpeed(data.m_position);
		data.m_dataVector0 = new Vector4(0.5f / info.m_halfWidth, 1f / info.m_segmentLength, 1f, 1f);
		Vector4 colorLocation = RenderManager.GetColorLocation((uint)(49152 + segmentID));
		Vector4 vector = colorLocation;
		if (NetNode.BlendJunction(m_startNode))
		{
			colorLocation = RenderManager.GetColorLocation((uint)(86016 + m_startNode));
		}
		if (NetNode.BlendJunction(m_endNode))
		{
			vector = RenderManager.GetColorLocation((uint)(86016 + m_endNode));
		}
		data.m_dataVector3 = new Vector4(colorLocation.x, colorLocation.y, vector.x, vector.y);
		// modified
		if (customSegments == null || customSegments.Length == 0)
		// modified end
		{
			// modified
			if (customLanes != null)
			// modified end
			{
				bool invert;
				NetNode.Flags flags;
				Color color;
				NetNode.Flags flags2;
				Color color2;
				if ((m_flags & Flags.Invert) != 0)
				{
					invert = true;
					NetInfo info2 = instance.m_nodes.m_buffer[m_endNode].Info;
					info2.m_netAI.GetNodeState(m_endNode, ref instance.m_nodes.m_buffer[m_endNode], segmentID, ref this, out flags, out color);
					NetInfo info3 = instance.m_nodes.m_buffer[m_startNode].Info;
					info3.m_netAI.GetNodeState(m_startNode, ref instance.m_nodes.m_buffer[m_startNode], segmentID, ref this, out flags2, out color2);
				}
				else
				{
					invert = false;
					NetInfo info4 = instance.m_nodes.m_buffer[m_startNode].Info;
					info4.m_netAI.GetNodeState(m_startNode, ref instance.m_nodes.m_buffer[m_startNode], segmentID, ref this, out flags, out color);
					NetInfo info5 = instance.m_nodes.m_buffer[m_endNode].Info;
					info5.m_netAI.GetNodeState(m_endNode, ref instance.m_nodes.m_buffer[m_endNode], segmentID, ref this, out flags2, out color2);
				}
				float startAngle = (float)(int)m_cornerAngleStart * 0.0245436933f;
				float endAngle = (float)(int)m_cornerAngleEnd * 0.0245436933f;
				int num = 0;
				uint num2 = m_lanes;
				// modified
				for (int i = 0; i < customLanes.Length; i++)
				// modified end
				{
					if (num2 == 0)
					{
						break;
					}
					// modified
					instance.m_lanes.m_buffer[num2].RefreshInstance(num2, customLanes[i], startAngle, endAngle, invert, ref data, ref num);
					// modified end
					num2 = instance.m_lanes.m_buffer[num2].m_nextLane;
				}
			}
		}
		else
		{
			float vScale = info.m_netAI.GetVScale();
			CalculateCorner(segmentID, true, true, true, out Vector3 vector2, out Vector3 startDir, out bool smoothStart);
			CalculateCorner(segmentID, true, false, true, out Vector3 vector3, out Vector3 endDir, out bool smoothEnd);
			CalculateCorner(segmentID, true, true, false, out Vector3 vector4, out Vector3 startDir2, out smoothStart);
			CalculateCorner(segmentID, true, false, false, out Vector3 vector5, out Vector3 endDir2, out smoothEnd);
			CalculateMiddlePoints(vector2, startDir, vector5, endDir2, smoothStart, smoothEnd, out Vector3 vector6, out Vector3 vector7);
			CalculateMiddlePoints(vector4, startDir2, vector3, endDir, smoothStart, smoothEnd, out Vector3 vector8, out Vector3 vector9);
			data.m_dataMatrix0 = CalculateControlMatrix(vector2, vector6, vector7, vector5, vector4, vector8, vector9, vector3, data.m_position, vScale);
			data.m_dataMatrix1 = CalculateControlMatrix(vector4, vector8, vector9, vector3, vector2, vector6, vector7, vector5, data.m_position, vScale);
		}
		if ((m_flags & Flags.NameVisible2) != 0)
		{
			string segmentName = instance.GetSegmentName(segmentID);
			UIFont nameFont = instance.m_properties.m_nameFont;
			data.m_nameData = Singleton<InstanceManager>.instance.GetNameData(segmentName, nameFont, true);
			if (data.m_nameData != null)
			{
				float snapElevation = info.m_netAI.GetSnapElevation();
				position.y += snapElevation;
				position2.y += snapElevation;
				CalculateMiddlePoints(position, m_startDirection, position2, m_endDirection, true, true, out Vector3 middlePos, out Vector3 middlePos2);
				data.m_dataMatrix2 = CalculateControlMatrix(position, middlePos, middlePos2, position2, data.m_position, 1f);
			}
		}
		else
		{
			data.m_nameData = null;
		}
		if (info.m_requireSurfaceMaps)
		{
			Singleton<TerrainManager>.instance.GetSurfaceMapping(data.m_position, out data.m_dataTexture0, out data.m_dataTexture1, out data.m_dataVector1);
		}
		else if (info.m_requireHeightMap)
		{
			Singleton<TerrainManager>.instance.GetHeightMapping(data.m_position, out data.m_dataTexture0, out data.m_dataVector1, out data.m_dataVector2);
		}
	}
	// modified
	if (customSegments != null && (layerMask & info.m_netLayers) != 0)
	// modified end
	{
		// modified
		for (int j = 0; j < customSegments.Length; j++)
			// modified end
		{
			// modified
			NetInfo.Segment segment = customSegments[j];
			// modified end
			if (segment.CheckFlags(m_flags, out bool flag))
			{
				Vector4 dataVector = data.m_dataVector3;
				Vector4 dataVector2 = data.m_dataVector0;
				if (segment.m_requireWindSpeed)
				{
					dataVector.w = data.m_dataFloat0;
				}
				if (flag)
				{
					dataVector2.x = 0f - dataVector2.x;
					dataVector2.y = 0f - dataVector2.y;
				}
				if (cameraInfo.CheckRenderDistance(data.m_position, segment.m_lodRenderDistance))
				{
					instance.m_materialBlock.Clear();
					instance.m_materialBlock.SetMatrix(instance.ID_LeftMatrix, data.m_dataMatrix0);
					instance.m_materialBlock.SetMatrix(instance.ID_RightMatrix, data.m_dataMatrix1);
					instance.m_materialBlock.SetVector(instance.ID_MeshScale, dataVector2);
					instance.m_materialBlock.SetVector(instance.ID_ObjectIndex, dataVector);
					instance.m_materialBlock.SetColor(instance.ID_Color, data.m_dataColor0);
					if (segment.m_requireSurfaceMaps && (Object)data.m_dataTexture0 != (Object)null)
					{
						instance.m_materialBlock.SetTexture(instance.ID_SurfaceTexA, data.m_dataTexture0);
						instance.m_materialBlock.SetTexture(instance.ID_SurfaceTexB, data.m_dataTexture1);
						instance.m_materialBlock.SetVector(instance.ID_SurfaceMapping, data.m_dataVector1);
					}
					else if (segment.m_requireHeightMap && (Object)data.m_dataTexture0 != (Object)null)
					{
						instance.m_materialBlock.SetTexture(instance.ID_HeightMap, data.m_dataTexture0);
						instance.m_materialBlock.SetVector(instance.ID_HeightMapping, data.m_dataVector1);
						instance.m_materialBlock.SetVector(instance.ID_SurfaceMapping, data.m_dataVector2);
					}
					instance.m_drawCallData.m_defaultCalls++;
					Graphics.DrawMesh(segment.m_segmentMesh, data.m_position, data.m_rotation, segment.m_segmentMaterial, segment.m_layer, null, 0, instance.m_materialBlock);
				}
				else
				{
					NetInfo.LodValue combinedLod = segment.m_combinedLod;
					if (combinedLod != null)
					{
						if (segment.m_requireSurfaceMaps)
						{
							if ((Object)data.m_dataTexture0 != (Object)combinedLod.m_surfaceTexA)
							{
								if (combinedLod.m_lodCount != 0)
								{
									RenderLod(cameraInfo, combinedLod);
								}
								combinedLod.m_surfaceTexA = data.m_dataTexture0;
								combinedLod.m_surfaceTexB = data.m_dataTexture1;
								combinedLod.m_surfaceMapping = data.m_dataVector1;
							}
						}
						else if (segment.m_requireHeightMap && (Object)data.m_dataTexture0 != (Object)combinedLod.m_heightMap)
						{
							if (combinedLod.m_lodCount != 0)
							{
								RenderLod(cameraInfo, combinedLod);
							}
							combinedLod.m_heightMap = data.m_dataTexture0;
							combinedLod.m_heightMapping = data.m_dataVector1;
							combinedLod.m_surfaceMapping = data.m_dataVector2;
						}
						combinedLod.m_leftMatrices[combinedLod.m_lodCount] = data.m_dataMatrix0;
						combinedLod.m_rightMatrices[combinedLod.m_lodCount] = data.m_dataMatrix1;
						combinedLod.m_meshScales[combinedLod.m_lodCount] = dataVector2;
						combinedLod.m_objectIndices[combinedLod.m_lodCount] = dataVector;
						combinedLod.m_meshLocations[combinedLod.m_lodCount] = data.m_position;
						combinedLod.m_lodMin = Vector3.Min(combinedLod.m_lodMin, data.m_position);
						combinedLod.m_lodMax = Vector3.Max(combinedLod.m_lodMax, data.m_position);
						if (++combinedLod.m_lodCount == combinedLod.m_leftMatrices.Length)
						{
							RenderLod(cameraInfo, combinedLod);
						}
					}
				}
			}
		}
	}
	// modified
	if (customLanes != null)
	// modified end
	{
		if ((layerMask & info.m_propLayers) == 0 && !cameraInfo.CheckRenderDistance(data.m_position, info.m_maxPropDistance + 128f))
		{
			return;
		}
		bool invert2;
		NetNode.Flags startFlags;
		Color startColor;
		NetNode.Flags endFlags;
		Color endColor;
		if ((m_flags & Flags.Invert) != 0)
		{
			invert2 = true;
			NetInfo info6 = instance.m_nodes.m_buffer[m_endNode].Info;
			info6.m_netAI.GetNodeState(m_endNode, ref instance.m_nodes.m_buffer[m_endNode], segmentID, ref this, out startFlags, out startColor);
			NetInfo info7 = instance.m_nodes.m_buffer[m_startNode].Info;
			info7.m_netAI.GetNodeState(m_startNode, ref instance.m_nodes.m_buffer[m_startNode], segmentID, ref this, out endFlags, out endColor);
		}
		else
		{
			invert2 = false;
			NetInfo info8 = instance.m_nodes.m_buffer[m_startNode].Info;
			info8.m_netAI.GetNodeState(m_startNode, ref instance.m_nodes.m_buffer[m_startNode], segmentID, ref this, out startFlags, out startColor);
			NetInfo info9 = instance.m_nodes.m_buffer[m_endNode].Info;
			info9.m_netAI.GetNodeState(m_endNode, ref instance.m_nodes.m_buffer[m_endNode], segmentID, ref this, out endFlags, out endColor);
		}
		float startAngle2 = (float)(int)m_cornerAngleStart * 0.0245436933f;
		float endAngle2 = (float)(int)m_cornerAngleEnd * 0.0245436933f;
		Vector4 objectIndex = new Vector4(data.m_dataVector3.x, data.m_dataVector3.y, 1f, data.m_dataFloat0);
		Vector4 objectIndex2 = new Vector4(data.m_dataVector3.z, data.m_dataVector3.w, 1f, data.m_dataFloat0);
		InfoManager.InfoMode currentMode = Singleton<InfoManager>.instance.CurrentMode;
		if (currentMode != 0 && !info.m_netAI.ColorizeProps(currentMode))
		{
			objectIndex.z = 0f;
			objectIndex2.z = 0f;
		}
		// modified
		int num3 = (customSegments != null && customSegments.Length != 0) ? (-1) : 0;
		// modified end
		uint num4 = m_lanes;
		if ((m_flags & Flags.Collapsed) != 0)
		{
			// modified
			for (int k = 0; k < customLanes.Length; k++)
			// modified end
			{
				if (num4 == 0)
				{
					break;
				}
				instance.m_lanes.m_buffer[num4].RenderDestroyedInstance(cameraInfo, segmentID, num4, info, customLanes[k], startFlags, endFlags, startColor, endColor, startAngle2, endAngle2, invert2, layerMask, objectIndex, objectIndex2, ref data, ref num3);
				num4 = instance.m_lanes.m_buffer[num4].m_nextLane;
			}
		}
		else
		{
			// modified
			for (int l = 0; l < customLanes.Length; l++)
			// modified end
			{
				if (num4 == 0)
				{
					break;
				}
				instance.m_lanes.m_buffer[num4].RenderInstance(cameraInfo, segmentID, num4, customLanes[l], startFlags, endFlags, startColor, endColor, startAngle2, endAngle2, invert2, layerMask, objectIndex, objectIndex2, ref data, ref num3);
				num4 = instance.m_lanes.m_buffer[num4].m_nextLane;
			}
		}
	}
}
