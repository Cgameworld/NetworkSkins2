// NetNode
using ColossalFramework;
using UnityEngine;

public void PopulateGroupData(ushort nodeID, int groupX, int groupZ, int layer, ref int vertexIndex, ref int triangleIndex, Vector3 groupPosition, RenderGroup.MeshData data, ref Vector3 min, ref Vector3 max, ref float maxRenderDistance, ref float maxInstanceDistance, ref bool requireSurfaceMaps)
{
	NetInfo info = Info;
	if (m_problems != Notification.Problem.None && layer == Singleton<NotificationManager>.instance.m_notificationLayer && (m_flags & Flags.Temporary) == Flags.None)
	{
		Vector3 position = m_position;
		position.y += info.m_maxHeight;
		Notification.PopulateGroupData(m_problems, position, 1f, groupX, groupZ, ref vertexIndex, ref triangleIndex, groupPosition, data, ref min, ref max, ref maxRenderDistance, ref maxInstanceDistance);
	}
	bool flag = false;
	if ((m_flags & Flags.Junction) != 0)
	{
		NetManager instance = Singleton<NetManager>.instance;
		Vector3 a = m_position;
		for (int i = 0; i < 8; i++)
		{
			ushort segment = GetSegment(i);
			if (segment != 0)
			{
				NetInfo info2 = instance.m_segments.m_buffer[segment].Info;
				ItemClass connectionClass = info2.GetConnectionClass();
				Vector3 a2 = (nodeID != instance.m_segments.m_buffer[segment].m_startNode) ? instance.m_segments.m_buffer[segment].m_endDirection : instance.m_segments.m_buffer[segment].m_startDirection;
				float num = -1f;
				for (int j = 0; j < 8; j++)
				{
					ushort segment2 = GetSegment(j);
					if (segment2 != 0 && segment2 != segment)
					{
						NetInfo info3 = instance.m_segments.m_buffer[segment2].Info;
						ItemClass connectionClass2 = info3.GetConnectionClass();
						if (((info.m_netLayers | info2.m_netLayers | info3.m_netLayers) & 1 << layer) != 0 && (connectionClass.m_service == connectionClass2.m_service || (info2.m_nodeConnectGroups & info3.m_connectGroup) != 0 || (info3.m_nodeConnectGroups & info2.m_connectGroup) != 0))
						{
							Vector3 vector = (nodeID != instance.m_segments.m_buffer[segment2].m_startNode) ? instance.m_segments.m_buffer[segment2].m_endDirection : instance.m_segments.m_buffer[segment2].m_startDirection;
							float num2 = a2.x * vector.x + a2.z * vector.z;
							num = Mathf.Max(num, num2);
							bool flag2 = info2.m_requireDirectRenderers && (info2.m_nodeConnectGroups == NetInfo.ConnectGroup.None || (info2.m_nodeConnectGroups & info3.m_connectGroup) != NetInfo.ConnectGroup.None);
							bool flag3 = info3.m_requireDirectRenderers && (info3.m_nodeConnectGroups == NetInfo.ConnectGroup.None || (info3.m_nodeConnectGroups & info2.m_connectGroup) != NetInfo.ConnectGroup.None);
							if (j > i && (flag2 || flag3))
							{
								float num3 = 0.01f - Mathf.Min(info2.m_maxTurnAngleCos, info3.m_maxTurnAngleCos);
								if (num2 < num3)
								{
									float num4 = (!flag2) ? -1E+08f : info2.m_netAI.GetNodeInfoPriority(segment, ref instance.m_segments.m_buffer[segment]);
									float num5 = (!flag3) ? -1E+08f : info3.m_netAI.GetNodeInfoPriority(segment2, ref instance.m_segments.m_buffer[segment2]);
									if (num4 >= num5)
									{
										if (info2.m_nodes != null && info2.m_nodes.Length != 0)
										{
											flag = true;
											float vScale = info2.m_netAI.GetVScale();
											Vector3 zero = Vector3.zero;
											Vector3 zero2 = Vector3.zero;
											Vector3 vector2 = Vector3.zero;
											Vector3 vector3 = Vector3.zero;
											Vector3 zero3 = Vector3.zero;
											Vector3 zero4 = Vector3.zero;
											Vector3 zero5 = Vector3.zero;
											Vector3 zero6 = Vector3.zero;
											bool start = Singleton<NetManager>.instance.m_segments.m_buffer[segment].m_startNode == nodeID;
											Singleton<NetManager>.instance.m_segments.m_buffer[segment].CalculateCorner(segment, true, start, false, out zero, out zero3, out bool flag4);
											Singleton<NetManager>.instance.m_segments.m_buffer[segment].CalculateCorner(segment, true, start, true, out zero2, out zero4, out flag4);
											start = (Singleton<NetManager>.instance.m_segments.m_buffer[segment2].m_startNode == nodeID);
											Singleton<NetManager>.instance.m_segments.m_buffer[segment2].CalculateCorner(segment2, true, start, true, out vector2, out zero5, out flag4);
											Singleton<NetManager>.instance.m_segments.m_buffer[segment2].CalculateCorner(segment2, true, start, false, out vector3, out zero6, out flag4);
											Vector3 b = (vector3 - vector2) * (info2.m_halfWidth / info3.m_halfWidth * 0.5f - 0.5f);
											vector2 -= b;
											vector3 += b;
											NetSegment.CalculateMiddlePoints(zero, -zero3, vector2, -zero5, true, true, out Vector3 vector4, out Vector3 vector5);
											NetSegment.CalculateMiddlePoints(zero2, -zero4, vector3, -zero6, true, true, out Vector3 vector6, out Vector3 vector7);
											Matrix4x4 leftMatrix = NetSegment.CalculateControlMatrix(zero, vector4, vector5, vector2, zero2, vector6, vector7, vector3, groupPosition, vScale);
											Matrix4x4 rightMatrix = NetSegment.CalculateControlMatrix(zero2, vector6, vector7, vector3, zero, vector4, vector5, vector2, groupPosition, vScale);
											Vector4 vector8 = new Vector4(0.5f / info2.m_halfWidth, 1f / info2.m_segmentLength, 1f, 1f);
											Vector4 colorLocation;
											Vector4 vector9;
											if (BlendJunction(nodeID))
											{
												colorLocation = RenderManager.GetColorLocation((uint)(86016 + nodeID));
												vector9 = colorLocation;
											}
											else
											{
												colorLocation = RenderManager.GetColorLocation((uint)(49152 + segment));
												vector9 = RenderManager.GetColorLocation((uint)(49152 + segment2));
											}
											Vector4 vector10 = new Vector4(colorLocation.x, colorLocation.y, vector9.x, vector9.y);
											for (int k = 0; k < info2.m_nodes.Length; k++)
											{
												NetInfo.Node node = info2.m_nodes[k];
												Vector4 objectIndex;
												Vector4 meshScale;
												bool flag5;
												if ((node.m_connectGroup == NetInfo.ConnectGroup.None || (node.m_connectGroup & info3.m_connectGroup & NetInfo.ConnectGroup.AllGroups) != 0) && node.m_layer == layer && node.CheckFlags(m_flags) && node.m_combinedLod != null && node.m_directConnect
													// modified
													&& NetNodeRenderPatch:ShouldRenderJunctionNode(node, segment, segment2)
													// modified end
												)
												{
													objectIndex = vector10;
													meshScale = vector8;
													if (node.m_requireWindSpeed)
													{
														objectIndex.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
													}
													if ((node.m_connectGroup & NetInfo.ConnectGroup.Oneway) != 0)
													{
														flag5 = (instance.m_segments.m_buffer[segment].m_startNode == nodeID == ((instance.m_segments.m_buffer[segment].m_flags & NetSegment.Flags.Invert) == NetSegment.Flags.None));
														if (info3.m_hasBackwardVehicleLanes == info3.m_hasForwardVehicleLanes && (node.m_connectGroup & NetInfo.ConnectGroup.Directional) == NetInfo.ConnectGroup.None)
														{
															goto IL_0736;
														}
														bool flag6 = instance.m_segments.m_buffer[segment2].m_startNode == nodeID == ((instance.m_segments.m_buffer[segment2].m_flags & NetSegment.Flags.Invert) == NetSegment.Flags.None);
														if (flag5 != flag6)
														{
															goto IL_0736;
														}
														continue;
													}
													goto IL_078e;
												}
												continue;
												IL_0736:
												if (flag5)
												{
													if ((node.m_connectGroup & NetInfo.ConnectGroup.OnewayStart) != 0)
													{
														goto IL_078e;
													}
												}
												else if ((node.m_connectGroup & NetInfo.ConnectGroup.OnewayEnd) != 0)
												{
													meshScale.x = 0f - meshScale.x;
													meshScale.y = 0f - meshScale.y;
													goto IL_078e;
												}
												continue;
												IL_078e:
												PopulateGroupData(info2, node, leftMatrix, rightMatrix, meshScale, objectIndex, ref vertexIndex, ref triangleIndex, data, ref requireSurfaceMaps);
											}
										}
									}
									else if (info3.m_nodes != null && info3.m_nodes.Length != 0)
									{
										flag = true;
										float vScale2 = info3.m_netAI.GetVScale();
										Vector3 vector11 = Vector3.zero;
										Vector3 vector12 = Vector3.zero;
										Vector3 zero7 = Vector3.zero;
										Vector3 zero8 = Vector3.zero;
										Vector3 zero9 = Vector3.zero;
										Vector3 zero10 = Vector3.zero;
										Vector3 zero11 = Vector3.zero;
										Vector3 zero12 = Vector3.zero;
										bool start2 = Singleton<NetManager>.instance.m_segments.m_buffer[segment].m_startNode == nodeID;
										Singleton<NetManager>.instance.m_segments.m_buffer[segment].CalculateCorner(segment, true, start2, false, out vector11, out zero9, out bool flag7);
										Singleton<NetManager>.instance.m_segments.m_buffer[segment].CalculateCorner(segment, true, start2, true, out vector12, out zero10, out flag7);
										start2 = (Singleton<NetManager>.instance.m_segments.m_buffer[segment2].m_startNode == nodeID);
										Singleton<NetManager>.instance.m_segments.m_buffer[segment2].CalculateCorner(segment2, true, start2, true, out zero7, out zero11, out flag7);
										Singleton<NetManager>.instance.m_segments.m_buffer[segment2].CalculateCorner(segment2, true, start2, false, out zero8, out zero12, out flag7);
										Vector3 b2 = (vector12 - vector11) * (info3.m_halfWidth / info2.m_halfWidth * 0.5f - 0.5f);
										vector11 -= b2;
										vector12 += b2;
										NetSegment.CalculateMiddlePoints(vector11, -zero9, zero7, -zero11, true, true, out Vector3 vector13, out Vector3 vector14);
										NetSegment.CalculateMiddlePoints(vector12, -zero10, zero8, -zero12, true, true, out Vector3 vector15, out Vector3 vector16);
										Matrix4x4 leftMatrix2 = NetSegment.CalculateControlMatrix(vector11, vector13, vector14, zero7, vector12, vector15, vector16, zero8, groupPosition, vScale2);
										Matrix4x4 rightMatrix2 = NetSegment.CalculateControlMatrix(vector12, vector15, vector16, zero8, vector11, vector13, vector14, zero7, groupPosition, vScale2);
										Vector4 vector17 = new Vector4(0.5f / info3.m_halfWidth, 1f / info3.m_segmentLength, 1f, 1f);
										Vector4 colorLocation2;
										Vector4 vector18;
										if (BlendJunction(nodeID))
										{
											colorLocation2 = RenderManager.GetColorLocation((uint)(86016 + nodeID));
											vector18 = colorLocation2;
										}
										else
										{
											colorLocation2 = RenderManager.GetColorLocation((uint)(49152 + segment));
											vector18 = RenderManager.GetColorLocation((uint)(49152 + segment2));
										}
										Vector4 vector19 = new Vector4(colorLocation2.x, colorLocation2.y, vector18.x, vector18.y);
										for (int l = 0; l < info3.m_nodes.Length; l++)
										{
											NetInfo.Node node2 = info3.m_nodes[l];
											Vector4 objectIndex2;
											Vector4 meshScale2;
											bool flag8;
											if ((node2.m_connectGroup == NetInfo.ConnectGroup.None || (node2.m_connectGroup & info2.m_connectGroup & NetInfo.ConnectGroup.AllGroups) != 0) && node2.m_layer == layer && node2.CheckFlags(m_flags) && node2.m_combinedLod != null && node2.m_directConnect)
											{
												objectIndex2 = vector19;
												meshScale2 = vector17;
												if (node2.m_requireWindSpeed)
												{
													objectIndex2.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
												}
												if ((node2.m_connectGroup & NetInfo.ConnectGroup.Oneway) != 0)
												{
													flag8 = (instance.m_segments.m_buffer[segment2].m_startNode == nodeID == ((instance.m_segments.m_buffer[segment2].m_flags & NetSegment.Flags.Invert) == NetSegment.Flags.None));
													if (info2.m_hasBackwardVehicleLanes == info2.m_hasForwardVehicleLanes && (node2.m_connectGroup & NetInfo.ConnectGroup.Directional) == NetInfo.ConnectGroup.None)
													{
														goto IL_0b97;
													}
													bool flag9 = instance.m_segments.m_buffer[segment].m_startNode == nodeID == ((instance.m_segments.m_buffer[segment].m_flags & NetSegment.Flags.Invert) == NetSegment.Flags.None);
													if (flag9 != flag8)
													{
														goto IL_0b97;
													}
													continue;
												}
												goto IL_0bef;
											}
											continue;
											IL_0b97:
											if (flag8)
											{
												if ((node2.m_connectGroup & NetInfo.ConnectGroup.OnewayStart) != 0)
												{
													meshScale2.x = 0f - meshScale2.x;
													meshScale2.y = 0f - meshScale2.y;
													goto IL_0bef;
												}
											}
											else if ((node2.m_connectGroup & NetInfo.ConnectGroup.OnewayEnd) != 0)
											{
												goto IL_0bef;
											}
											continue;
											IL_0bef:
											PopulateGroupData(info3, node2, leftMatrix2, rightMatrix2, meshScale2, objectIndex2, ref vertexIndex, ref triangleIndex, data, ref requireSurfaceMaps);
										}
									}
								}
							}
						}
					}
				}
				a += a2 * (2f + num * 2f);
			}
		}
		a.y = m_position.y + (float)(int)m_heightOffset * 0.015625f;
		if ((info.m_netLayers & 1 << layer) != 0 && info.m_requireSegmentRenderers)
		{
			for (int m = 0; m < 8; m++)
			{
				ushort segment3 = GetSegment(m);
				if (segment3 != 0)
				{
					NetInfo info4 = instance.m_segments.m_buffer[segment3].Info;
					if (info4.m_nodes != null && info4.m_nodes.Length != 0)
					{
						flag = true;
						float vScale3 = info4.m_netAI.GetVScale();
						Vector3 zero13 = Vector3.zero;
						Vector3 zero14 = Vector3.zero;
						Vector3 zero15 = Vector3.zero;
						Vector3 zero16 = Vector3.zero;
						Vector3 vector20 = Vector3.zero;
						Vector3 vector21 = Vector3.zero;
						Vector3 a3 = Vector3.zero;
						Vector3 a4 = Vector3.zero;
						Vector3 zero17 = Vector3.zero;
						Vector3 zero18 = Vector3.zero;
						Vector3 zero19 = Vector3.zero;
						Vector3 zero20 = Vector3.zero;
						NetSegment netSegment = instance.m_segments.m_buffer[segment3];
						ItemClass connectionClass3 = info4.GetConnectionClass();
						Vector3 vector22 = (nodeID != netSegment.m_startNode) ? netSegment.m_endDirection : netSegment.m_startDirection;
						float num6 = -4f;
						float num7 = -4f;
						ushort num8 = 0;
						ushort num9 = 0;
						for (int n = 0; n < 8; n++)
						{
							ushort segment4 = GetSegment(n);
							if (segment4 != 0 && segment4 != segment3)
							{
								NetInfo info5 = instance.m_segments.m_buffer[segment4].Info;
								ItemClass connectionClass4 = info5.GetConnectionClass();
								if (connectionClass3.m_service == connectionClass4.m_service)
								{
									NetSegment netSegment2 = instance.m_segments.m_buffer[segment4];
									Vector3 vector23 = (nodeID != netSegment2.m_startNode) ? netSegment2.m_endDirection : netSegment2.m_startDirection;
									float num10 = vector22.x * vector23.x + vector22.z * vector23.z;
									if (vector23.z * vector22.x - vector23.x * vector22.z < 0f)
									{
										if (num10 > num6)
										{
											num6 = num10;
											num8 = segment4;
										}
										num10 = -2f - num10;
										if (num10 > num7)
										{
											num7 = num10;
											num9 = segment4;
										}
									}
									else
									{
										if (num10 > num7)
										{
											num7 = num10;
											num9 = segment4;
										}
										num10 = -2f - num10;
										if (num10 > num6)
										{
											num6 = num10;
											num8 = segment4;
										}
									}
								}
							}
						}
						bool start3 = netSegment.m_startNode == nodeID;
						netSegment.CalculateCorner(segment3, true, start3, false, out zero13, out zero15, out bool flag10);
						netSegment.CalculateCorner(segment3, true, start3, true, out zero14, out zero16, out flag10);
						Matrix4x4 leftMatrix3;
						Matrix4x4 rightMatrix3;
						Matrix4x4 leftMatrixB;
						Matrix4x4 rightMatrixB;
						Vector4 meshScale3;
						Vector4 centerPos;
						Vector4 sideScale;
						if (num8 != 0 && num9 != 0)
						{
							float num11 = info4.m_pavementWidth / info4.m_halfWidth * 0.5f;
							float y = 1f;
							if (num8 != 0)
							{
								NetSegment netSegment3 = instance.m_segments.m_buffer[num8];
								NetInfo info6 = netSegment3.Info;
								start3 = (netSegment3.m_startNode == nodeID);
								netSegment3.CalculateCorner(num8, true, start3, true, out vector20, out a3, out flag10);
								netSegment3.CalculateCorner(num8, true, start3, false, out vector21, out a4, out flag10);
								float num12 = info6.m_pavementWidth / info6.m_halfWidth * 0.5f;
								num11 = (num11 + num12) * 0.5f;
								y = 2f * info4.m_halfWidth / (info4.m_halfWidth + info6.m_halfWidth);
							}
							float num13 = info4.m_pavementWidth / info4.m_halfWidth * 0.5f;
							float w = 1f;
							if (num9 != 0)
							{
								NetSegment netSegment4 = instance.m_segments.m_buffer[num9];
								NetInfo info7 = netSegment4.Info;
								start3 = (netSegment4.m_startNode == nodeID);
								netSegment4.CalculateCorner(num9, true, start3, true, out zero17, out zero19, out flag10);
								netSegment4.CalculateCorner(num9, true, start3, false, out zero18, out zero20, out flag10);
								float num14 = info7.m_pavementWidth / info7.m_halfWidth * 0.5f;
								num13 = (num13 + num14) * 0.5f;
								w = 2f * info4.m_halfWidth / (info4.m_halfWidth + info7.m_halfWidth);
							}
							NetSegment.CalculateMiddlePoints(zero13, -zero15, vector20, -a3, true, true, out Vector3 vector24, out Vector3 vector25);
							NetSegment.CalculateMiddlePoints(zero14, -zero16, vector21, -a4, true, true, out Vector3 vector26, out Vector3 vector27);
							NetSegment.CalculateMiddlePoints(zero13, -zero15, zero17, -zero19, true, true, out Vector3 vector28, out Vector3 vector29);
							NetSegment.CalculateMiddlePoints(zero14, -zero16, zero18, -zero20, true, true, out Vector3 vector30, out Vector3 vector31);
							leftMatrix3 = NetSegment.CalculateControlMatrix(zero13, vector24, vector25, vector20, zero13, vector24, vector25, vector20, groupPosition, vScale3);
							rightMatrix3 = NetSegment.CalculateControlMatrix(zero14, vector26, vector27, vector21, zero14, vector26, vector27, vector21, groupPosition, vScale3);
							leftMatrixB = NetSegment.CalculateControlMatrix(zero13, vector28, vector29, zero17, zero13, vector28, vector29, zero17, groupPosition, vScale3);
							rightMatrixB = NetSegment.CalculateControlMatrix(zero14, vector30, vector31, zero18, zero14, vector30, vector31, zero18, groupPosition, vScale3);
							meshScale3 = new Vector4(0.5f / info4.m_halfWidth, 1f / info4.m_segmentLength, 0.5f - info4.m_pavementWidth / info4.m_halfWidth * 0.5f, info4.m_pavementWidth / info4.m_halfWidth * 0.5f);
							centerPos = a - groupPosition;
							centerPos.w = (leftMatrix3.m33 + rightMatrix3.m33 + leftMatrixB.m33 + rightMatrixB.m33) * 0.25f;
							sideScale = new Vector4(num11, y, num13, w);
						}
						else
						{
							a.x = (zero13.x + zero14.x) * 0.5f;
							a.z = (zero13.z + zero14.z) * 0.5f;
							vector20 = zero14;
							vector21 = zero13;
							a3 = zero16;
							a4 = zero15;
							float d = info.m_netAI.GetEndRadius() * 1.33333337f;
							Vector3 vector32 = zero13 - zero15 * d;
							Vector3 vector33 = vector20 - a3 * d;
							Vector3 vector34 = zero14 - zero16 * d;
							Vector3 vector35 = vector21 - a4 * d;
							Vector3 vector36 = zero13 + zero15 * d;
							Vector3 vector37 = vector20 + a3 * d;
							Vector3 vector38 = zero14 + zero16 * d;
							Vector3 vector39 = vector21 + a4 * d;
							leftMatrix3 = NetSegment.CalculateControlMatrix(zero13, vector32, vector33, vector20, zero13, vector32, vector33, vector20, groupPosition, vScale3);
							rightMatrix3 = NetSegment.CalculateControlMatrix(zero14, vector38, vector39, vector21, zero14, vector38, vector39, vector21, groupPosition, vScale3);
							leftMatrixB = NetSegment.CalculateControlMatrix(zero13, vector36, vector37, vector20, zero13, vector36, vector37, vector20, groupPosition, vScale3);
							rightMatrixB = NetSegment.CalculateControlMatrix(zero14, vector34, vector35, vector21, zero14, vector34, vector35, vector21, groupPosition, vScale3);
							leftMatrix3.SetRow(3, leftMatrix3.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
							rightMatrix3.SetRow(3, rightMatrix3.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
							leftMatrixB.SetRow(3, leftMatrixB.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
							rightMatrixB.SetRow(3, rightMatrixB.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
							meshScale3 = new Vector4(0.5f / info4.m_halfWidth, 1f / info4.m_segmentLength, 0.5f - info4.m_pavementWidth / info4.m_halfWidth * 0.5f, info4.m_pavementWidth / info4.m_halfWidth * 0.5f);
							centerPos = a - groupPosition;
							centerPos.w = (leftMatrix3.m33 + rightMatrix3.m33 + leftMatrixB.m33 + rightMatrixB.m33) * 0.25f;
							sideScale = new Vector4(info4.m_pavementWidth / info4.m_halfWidth * 0.5f, 1f, info4.m_pavementWidth / info4.m_halfWidth * 0.5f, 1f);
						}
						Vector4 colorLocation3;
						Vector4 vector40;
						if (BlendJunction(nodeID))
						{
							colorLocation3 = RenderManager.GetColorLocation((uint)(86016 + nodeID));
							vector40 = colorLocation3;
						}
						else
						{
							colorLocation3 = RenderManager.GetColorLocation((uint)(49152 + segment3));
							vector40 = RenderManager.GetColorLocation((uint)(86016 + nodeID));
						}
						Vector4 vector41 = new Vector4(colorLocation3.x, colorLocation3.y, vector40.x, vector40.y);
						for (int num15 = 0; num15 < info4.m_nodes.Length; num15++)
						{
							NetInfo.Node node3 = info4.m_nodes[num15];
							if (node3.m_layer == layer && node3.CheckFlags(m_flags) && node3.m_combinedLod != null && !node3.m_directConnect)
							{
								Vector4 objectIndex3 = vector41;
								if (node3.m_requireWindSpeed)
								{
									objectIndex3.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
								}
								PopulateGroupData(info4, node3, leftMatrix3, rightMatrix3, leftMatrixB, rightMatrixB, meshScale3, centerPos, sideScale, objectIndex3, ref vertexIndex, ref triangleIndex, data, ref requireSurfaceMaps);
							}
						}
					}
				}
			}
		}
	}
	else if ((info.m_netLayers & 1 << layer) != 0)
	{
		if ((m_flags & Flags.End) != 0)
		{
			if (info.m_nodes != null && info.m_nodes.Length != 0)
			{
				flag = true;
				float vScale4 = info.m_netAI.GetVScale() / 1.5f;
				Vector3 zero21 = Vector3.zero;
				Vector3 zero22 = Vector3.zero;
				Vector3 vector42 = Vector3.zero;
				Vector3 vector43 = Vector3.zero;
				Vector3 zero23 = Vector3.zero;
				Vector3 zero24 = Vector3.zero;
				Vector3 a5 = Vector3.zero;
				Vector3 a6 = Vector3.zero;
				bool flag11 = false;
				ushort num16 = 0;
				for (int num17 = 0; num17 < 8; num17++)
				{
					ushort segment5 = GetSegment(num17);
					if (segment5 != 0)
					{
						NetSegment netSegment5 = Singleton<NetManager>.instance.m_segments.m_buffer[segment5];
						bool start4 = netSegment5.m_startNode == nodeID;
						netSegment5.CalculateCorner(segment5, true, start4, false, out zero21, out zero23, out bool flag12);
						netSegment5.CalculateCorner(segment5, true, start4, true, out zero22, out zero24, out flag12);
						if (flag11)
						{
							a5 = -zero23;
							a6 = -zero24;
							zero23.y = 0.25f;
							zero24.y = 0.25f;
							a5.y = -5f;
							a6.y = -5f;
							vector42 = zero21 - zero23 * 10f + a5 * 10f;
							vector43 = zero22 - zero24 * 10f + a6 * 10f;
						}
						else
						{
							vector42 = zero22;
							vector43 = zero21;
							a5 = zero24;
							a6 = zero23;
						}
						num16 = segment5;
					}
				}
				if (flag11)
				{
					NetSegment.CalculateMiddlePoints(zero21, -zero23, vector42, -a5, true, true, out Vector3 vector44, out Vector3 vector45);
					NetSegment.CalculateMiddlePoints(zero22, -zero24, vector43, -a6, true, true, out Vector3 vector46, out Vector3 vector47);
					Matrix4x4 leftMatrix4 = NetSegment.CalculateControlMatrix(zero21, vector44, vector45, vector42, zero22, vector46, vector47, vector43, groupPosition, vScale4);
					Matrix4x4 rightMatrix4 = NetSegment.CalculateControlMatrix(zero22, vector46, vector47, vector43, zero21, vector44, vector45, vector42, groupPosition, vScale4);
					Vector4 meshScale4 = new Vector4(0.5f / info.m_halfWidth, 1f / info.m_segmentLength, 1f, 1f);
					Vector4 colorLocation4 = RenderManager.GetColorLocation((uint)(86016 + nodeID));
					Vector4 vector48 = new Vector4(colorLocation4.x, colorLocation4.y, colorLocation4.x, colorLocation4.y);
					if (info.m_segments != null && info.m_segments.Length != 0)
					{
						for (int num18 = 0; num18 < info.m_segments.Length; num18++)
						{
							NetInfo.Segment segment6 = info.m_segments[num18];
							if (segment6.m_layer == layer && segment6.CheckFlags(NetSegment.Flags.Bend | (Singleton<NetManager>.instance.m_segments.m_buffer[num16].m_flags & NetSegment.Flags.Collapsed), out bool _) && segment6.m_combinedLod != null)
							{
								Vector4 objectIndex4 = vector48;
								if (segment6.m_requireWindSpeed)
								{
									objectIndex4.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
								}
								NetSegment.PopulateGroupData(info, segment6, leftMatrix4, rightMatrix4, meshScale4, objectIndex4, ref vertexIndex, ref triangleIndex, groupPosition, data, ref requireSurfaceMaps);
							}
						}
					}
				}
				else
				{
					float d2 = info.m_netAI.GetEndRadius() * 1.33333337f;
					Vector3 vector49 = zero21 - zero23 * d2;
					Vector3 vector50 = vector42 - a5 * d2;
					Vector3 vector51 = zero22 - zero24 * d2;
					Vector3 vector52 = vector43 - a6 * d2;
					Vector3 vector53 = zero21 + zero23 * d2;
					Vector3 vector54 = vector42 + a5 * d2;
					Vector3 vector55 = zero22 + zero24 * d2;
					Vector3 vector56 = vector43 + a6 * d2;
					Matrix4x4 leftMatrix5 = NetSegment.CalculateControlMatrix(zero21, vector49, vector50, vector42, zero21, vector49, vector50, vector42, groupPosition, vScale4);
					Matrix4x4 rightMatrix5 = NetSegment.CalculateControlMatrix(zero22, vector55, vector56, vector43, zero22, vector55, vector56, vector43, groupPosition, vScale4);
					Matrix4x4 leftMatrixB2 = NetSegment.CalculateControlMatrix(zero21, vector53, vector54, vector42, zero21, vector53, vector54, vector42, groupPosition, vScale4);
					Matrix4x4 rightMatrixB2 = NetSegment.CalculateControlMatrix(zero22, vector51, vector52, vector43, zero22, vector51, vector52, vector43, groupPosition, vScale4);
					leftMatrix5.SetRow(3, leftMatrix5.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
					rightMatrix5.SetRow(3, rightMatrix5.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
					leftMatrixB2.SetRow(3, leftMatrixB2.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
					rightMatrixB2.SetRow(3, rightMatrixB2.GetRow(3) + new Vector4(0.2f, 0.2f, 0.2f, 0.2f));
					Vector4 meshScale5 = new Vector4(0.5f / info.m_halfWidth, 1f / info.m_segmentLength, 0.5f - info.m_pavementWidth / info.m_halfWidth * 0.5f, info.m_pavementWidth / info.m_halfWidth * 0.5f);
					Vector4 centerPos2 = new Vector4(m_position.x - groupPosition.x, m_position.y - groupPosition.y + (float)(int)m_heightOffset * 0.015625f, m_position.z - groupPosition.z, 0f);
					centerPos2.w = (leftMatrix5.m33 + rightMatrix5.m33 + leftMatrixB2.m33 + rightMatrixB2.m33) * 0.25f;
					Vector4 sideScale2 = new Vector4(info.m_pavementWidth / info.m_halfWidth * 0.5f, 1f, info.m_pavementWidth / info.m_halfWidth * 0.5f, 1f);
					Vector4 colorLocation5 = RenderManager.GetColorLocation((uint)(49152 + num16));
					Vector4 vector57 = new Vector4(colorLocation5.x, colorLocation5.y, colorLocation5.x, colorLocation5.y);
					for (int num19 = 0; num19 < info.m_nodes.Length; num19++)
					{
						NetInfo.Node node4 = info.m_nodes[num19];
						if (node4.m_layer == layer && node4.CheckFlags(m_flags) && node4.m_combinedLod != null && !node4.m_directConnect)
						{
							Vector4 objectIndex5 = vector57;
							if (node4.m_requireWindSpeed)
							{
								objectIndex5.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
							}
							PopulateGroupData(info, node4, leftMatrix5, rightMatrix5, leftMatrixB2, rightMatrixB2, meshScale5, centerPos2, sideScale2, objectIndex5, ref vertexIndex, ref triangleIndex, data, ref requireSurfaceMaps);
						}
					}
				}
			}
		}
		else if ((m_flags & Flags.Bend) != 0)
		{
			if (info.m_segments != null && info.m_segments.Length != 0)
			{
				goto IL_1d4a;
			}
			if (info.m_nodes != null && info.m_nodes.Length != 0)
			{
				goto IL_1d4a;
			}
		}
	}
	goto IL_2201;
	IL_1d4a:
	float vScale5 = info.m_netAI.GetVScale();
	Vector3 zero25 = Vector3.zero;
	Vector3 zero26 = Vector3.zero;
	Vector3 zero27 = Vector3.zero;
	Vector3 zero28 = Vector3.zero;
	Vector3 zero29 = Vector3.zero;
	Vector3 zero30 = Vector3.zero;
	Vector3 zero31 = Vector3.zero;
	Vector3 zero32 = Vector3.zero;
	ushort num20 = 0;
	ushort num21 = 0;
	bool flag14 = false;
	int num22 = 0;
	for (int num23 = 0; num23 < 8; num23++)
	{
		ushort segment7 = GetSegment(num23);
		NetSegment netSegment6;
		bool flag16;
		bool flag17;
		if (segment7 != 0)
		{
			netSegment6 = Singleton<NetManager>.instance.m_segments.m_buffer[segment7];
			bool flag15 = ++num22 == 1;
			flag16 = (netSegment6.m_startNode == nodeID);
			if (!flag15 && !flag14)
			{
				goto IL_1e05;
			}
			if (flag15 && !flag16)
			{
				goto IL_1e05;
			}
			netSegment6.CalculateCorner(segment7, true, flag16, true, out zero27, out zero31, out flag17);
			netSegment6.CalculateCorner(segment7, true, flag16, false, out zero28, out zero32, out flag17);
			num21 = segment7;
		}
		continue;
		IL_1e05:
		netSegment6.CalculateCorner(segment7, true, flag16, false, out zero25, out zero29, out flag17);
		netSegment6.CalculateCorner(segment7, true, flag16, true, out zero26, out zero30, out flag17);
		flag14 = true;
		num20 = segment7;
	}
	NetSegment.CalculateMiddlePoints(zero25, -zero29, zero27, -zero31, true, true, out Vector3 vector58, out Vector3 vector59);
	NetSegment.CalculateMiddlePoints(zero26, -zero30, zero28, -zero32, true, true, out Vector3 vector60, out Vector3 vector61);
	Matrix4x4 leftMatrix6 = NetSegment.CalculateControlMatrix(zero25, vector58, vector59, zero27, zero26, vector60, vector61, zero28, groupPosition, vScale5);
	Matrix4x4 rightMatrix6 = NetSegment.CalculateControlMatrix(zero26, vector60, vector61, zero28, zero25, vector58, vector59, zero27, groupPosition, vScale5);
	Vector4 vector62 = new Vector4(0.5f / info.m_halfWidth, 1f / info.m_segmentLength, 1f, 1f);
	Vector4 colorLocation6 = RenderManager.GetColorLocation((uint)(86016 + nodeID));
	Vector4 vector63 = new Vector4(colorLocation6.x, colorLocation6.y, colorLocation6.x, colorLocation6.y);
	if (info.m_segments != null && info.m_segments.Length != 0)
	{
		for (int num24 = 0; num24 < info.m_segments.Length; num24++)
		{
			NetInfo.Segment segment8 = info.m_segments[num24];
			if (segment8.m_layer == layer && segment8.CheckFlags(info.m_netAI.GetBendFlags(nodeID, ref this), out bool flag18) && segment8.m_combinedLod != null && !segment8.m_disableBendNodes)
			{
				Vector4 objectIndex6 = vector63;
				Vector4 meshScale6 = vector62;
				if (segment8.m_requireWindSpeed)
				{
					objectIndex6.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
				}
				if (flag18)
				{
					meshScale6.x = 0f - meshScale6.x;
					meshScale6.y = 0f - meshScale6.y;
				}
				flag = true;
				NetSegment.PopulateGroupData(info, segment8, leftMatrix6, rightMatrix6, meshScale6, objectIndex6, ref vertexIndex, ref triangleIndex, groupPosition, data, ref requireSurfaceMaps);
			}
		}
	}
	if (info.m_nodes != null && info.m_nodes.Length != 0)
	{
		for (int num25 = 0; num25 < info.m_nodes.Length; num25++)
		{
			NetInfo.Node node5 = info.m_nodes[num25];
			Vector4 objectIndex7;
			Vector4 meshScale7;
			if ((node5.m_connectGroup == NetInfo.ConnectGroup.None || (node5.m_connectGroup & info.m_connectGroup & NetInfo.ConnectGroup.AllGroups) != 0) && node5.m_layer == layer && node5.CheckFlags(m_flags) && node5.m_combinedLod != null && node5.m_directConnect
				// modified
				&& NetNodeRenderPatch.ShouldRenderBendNodeLod(nodeID, node5)
				// modified end
			)
			{
				objectIndex7 = vector63;
				meshScale7 = vector62;
				if (node5.m_requireWindSpeed)
				{
					objectIndex7.w = Singleton<WeatherManager>.instance.GetWindSpeed(m_position);
				}
				if ((node5.m_connectGroup & NetInfo.ConnectGroup.Oneway) != 0)
				{
					NetManager instance2 = Singleton<NetManager>.instance;
					bool flag19 = instance2.m_segments.m_buffer[num20].m_startNode == nodeID == ((instance2.m_segments.m_buffer[num20].m_flags & NetSegment.Flags.Invert) == NetSegment.Flags.None);
					bool flag20 = instance2.m_segments.m_buffer[num21].m_startNode == nodeID == ((instance2.m_segments.m_buffer[num21].m_flags & NetSegment.Flags.Invert) == NetSegment.Flags.None);
					if (flag19 != flag20)
					{
						if (flag19)
						{
							if ((node5.m_connectGroup & NetInfo.ConnectGroup.OnewayStart) != 0)
							{
								goto IL_21d2;
							}
						}
						else if ((node5.m_connectGroup & NetInfo.ConnectGroup.OnewayEnd) != 0)
						{
							meshScale7.x = 0f - meshScale7.x;
							meshScale7.y = 0f - meshScale7.y;
							goto IL_21d2;
						}
					}
					continue;
				}
				goto IL_21d2;
			}
			continue;
			IL_21d2:
			flag = true;
			PopulateGroupData(info, node5, leftMatrix6, rightMatrix6, meshScale7, objectIndex7, ref vertexIndex, ref triangleIndex, data, ref requireSurfaceMaps);
		}
	}
	goto IL_2201;
	IL_2201:
	if (flag)
	{
		min = Vector3.Min(min, m_bounds.min);
		max = Vector3.Max(max, m_bounds.max);
		maxRenderDistance = Mathf.Max(maxRenderDistance, 30000f);
		maxInstanceDistance = Mathf.Max(maxInstanceDistance, 1000f);
	}
}
